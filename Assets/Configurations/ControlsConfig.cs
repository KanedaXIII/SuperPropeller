//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Configurations/ControlsConfig.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsConfig: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsConfig()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsConfig"",
    ""maps"": [
        {
            ""name"": ""Mobile phone"",
            ""id"": ""f8716b33-eae4-42bb-95ab-e35c29ce6488"",
            ""actions"": [
                {
                    ""name"": ""Switch Direction"",
                    ""type"": ""Button"",
                    ""id"": ""4318b21b-bf85-4be0-b292-eef84e001ab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Color"",
                    ""type"": ""Button"",
                    ""id"": ""704c3caa-4bfa-49a5-aabb-75089e8f17b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe78dc5d-19c9-4b8b-a595-b1e694ff4c30"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""871fd844-5d46-43f3-8957-a208126acfb9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b719161-d34b-494e-901e-30bd8e2bad7d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Color"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""840f990e-4507-4c14-a421-5f1964b0a4df"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Color"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mobile phone
        m_Mobilephone = asset.FindActionMap("Mobile phone", throwIfNotFound: true);
        m_Mobilephone_SwitchDirection = m_Mobilephone.FindAction("Switch Direction", throwIfNotFound: true);
        m_Mobilephone_SwitchColor = m_Mobilephone.FindAction("Switch Color", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mobile phone
    private readonly InputActionMap m_Mobilephone;
    private List<IMobilephoneActions> m_MobilephoneActionsCallbackInterfaces = new List<IMobilephoneActions>();
    private readonly InputAction m_Mobilephone_SwitchDirection;
    private readonly InputAction m_Mobilephone_SwitchColor;
    public struct MobilephoneActions
    {
        private @ControlsConfig m_Wrapper;
        public MobilephoneActions(@ControlsConfig wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchDirection => m_Wrapper.m_Mobilephone_SwitchDirection;
        public InputAction @SwitchColor => m_Wrapper.m_Mobilephone_SwitchColor;
        public InputActionMap Get() { return m_Wrapper.m_Mobilephone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobilephoneActions set) { return set.Get(); }
        public void AddCallbacks(IMobilephoneActions instance)
        {
            if (instance == null || m_Wrapper.m_MobilephoneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobilephoneActionsCallbackInterfaces.Add(instance);
            @SwitchDirection.started += instance.OnSwitchDirection;
            @SwitchDirection.performed += instance.OnSwitchDirection;
            @SwitchDirection.canceled += instance.OnSwitchDirection;
            @SwitchColor.started += instance.OnSwitchColor;
            @SwitchColor.performed += instance.OnSwitchColor;
            @SwitchColor.canceled += instance.OnSwitchColor;
        }

        private void UnregisterCallbacks(IMobilephoneActions instance)
        {
            @SwitchDirection.started -= instance.OnSwitchDirection;
            @SwitchDirection.performed -= instance.OnSwitchDirection;
            @SwitchDirection.canceled -= instance.OnSwitchDirection;
            @SwitchColor.started -= instance.OnSwitchColor;
            @SwitchColor.performed -= instance.OnSwitchColor;
            @SwitchColor.canceled -= instance.OnSwitchColor;
        }

        public void RemoveCallbacks(IMobilephoneActions instance)
        {
            if (m_Wrapper.m_MobilephoneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobilephoneActions instance)
        {
            foreach (var item in m_Wrapper.m_MobilephoneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobilephoneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobilephoneActions @Mobilephone => new MobilephoneActions(this);
    public interface IMobilephoneActions
    {
        void OnSwitchDirection(InputAction.CallbackContext context);
        void OnSwitchColor(InputAction.CallbackContext context);
    }
}
